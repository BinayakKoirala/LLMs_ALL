To implement a Sudoku game in Java, we can start by identifying the core classes and their purposes:

1. `SudokuBoard`: Represents the Sudoku game board and manages the state of the game.
2. `Cell`: Represents a single cell in the Sudoku board and stores its value.
3. `GameController`: Handles the game logic and user interactions.
4. `InputValidator`: Validates user input for correctness.
5. `GameRenderer`: Renders the Sudoku board on the console.

Now, let's proceed with creating the necessary files and their contents.

**SudokuBoard.java**
```java
public class SudokuBoard {
    private final int SIZE = 9;
    private Cell[][] board;

    public SudokuBoard() {
        board = new Cell[SIZE][SIZE];
        // Initialize the board with empty cells
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                board[row][col] = new Cell();
            }
        }
    }

    // Add methods to manipulate the board state (e.g., setCellValue, getCellValue, etc.)
}
```

**Cell.java**
```java
public class Cell {
    private int value;

    public Cell() {
        value = 0; // 0 represents an empty cell
    }

    public int getValue() {
        return value;
    }

    public void setValue(int value) {
        this.value = value;
    }
}
```

**GameController.java**
```java
import java.util.Scanner;

public class GameController {
    private SudokuBoard board;
    private InputValidator validator;
    private GameRenderer renderer;

    public GameController() {
        board = new SudokuBoard();
        validator = new InputValidator();
        renderer = new GameRenderer();
    }

    public void startGame() {
        boolean gameFinished = false;
        Scanner scanner = new Scanner(System.in);

        while (!gameFinished) {
            renderer.renderBoard(board);

            System.out.print("Enter row (1-9): ");
            int row = scanner.nextInt();

            System.out.print("Enter column (1-9): ");
            int col = scanner.nextInt();

            System.out.print("Enter value (1-9): ");
            int value = scanner.nextInt();

            if (validator.isValidInput(row, col, value)) {
                board.setCellValue(row - 1, col - 1, value);
                if (board.isBoardFull()) {
                    gameFinished = true;
                    System.out.println("Congratulations! You solved the Sudoku puzzle.");
                }
            } else {
                System.out.println("Invalid input. Please try again.");
            }
        }

        scanner.close();
    }
}
```

**InputValidator.java**
```java
public class InputValidator {
    public boolean isValidInput(int row, int col, int value) {
        // Add validation logic to check if the input is valid
        // For example, check if the row, column, and value are within the valid range
        // and if the cell is empty
        return true;
    }
}
```

**GameRenderer.java**
```java
public class GameRenderer {
    public void renderBoard(SudokuBoard board) {
        // Add code to render the Sudoku board on the console
    }
}
```

**Main.java**
```java
public class Main {
    public static void main(String[] args) {
        GameController gameController = new GameController();
        gameController.startGame();
    }
}
```

This is a basic implementation of a Sudoku game in Java. You can further enhance the game by adding features like generating new puzzles, providing hints, implementing a scoring system, or creating a graphical user interface (GUI).

Please note that the code provided is a starting point and may require additional modifications and improvements based on your specific requirements.